import { useState, useCallback } from 'react'
import { 
  SurveyData, 
  SurveyResponse, 
  SurveyState,
  SURVEY_STORAGE_KEY, 
  SURVEY_COOLDOWN_MS 
} from '../types/survey'
import { surveyService } from '../lib/supabase/survey-service'

interface UseSurveyManagerReturn {
  surveyState: SurveyState
  canShowSurvey: () => boolean
  showSurvey: () => void
  submitResponse: (optionId: string, exportContext?: any) => void
  closeSurvey: () => void
  getSurveyStats: () => SurveyData
}

export const useSurveyManager = (): UseSurveyManagerReturn => {
  const [surveyState, setSurveyState] = useState<SurveyState>('hidden')

  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –∏–∑ localStorage
  const getSurveyData = useCallback((): SurveyData => {
    try {
      const stored = localStorage.getItem(SURVEY_STORAGE_KEY)
      if (!stored) {
        return {
          surveyResponses: [],
          surveySettings: { enabled: true }
        }
      }
      return JSON.parse(stored)
    } catch (error) {
      console.error('Error reading survey data:', error)
      return {
        surveyResponses: [],
        surveySettings: { enabled: true }
      }
    }
  }, [])

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –≤ localStorage
  const saveSurveyData = useCallback((data: SurveyData) => {
    try {
      localStorage.setItem(SURVEY_STORAGE_KEY, JSON.stringify(data))
    } catch (error) {
      console.error('Error saving survey data:', error)
    }
  }, [])

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ä–æ—Å
  const canShowSurvey = useCallback((): boolean => {
    const data = getSurveyData()
    
    // –ï—Å–ª–∏ –æ–ø—Ä–æ—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã
    if (!data.surveySettings.enabled) {
      return false
    }

    const now = Date.now()
    
    // –ï—Å–ª–∏ –æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω —Å–µ–≥–æ–¥–Ω—è
    if (data.lastSurveyShown) {
      const timeSinceShown = now - data.lastSurveyShown
      if (timeSinceShown < SURVEY_COOLDOWN_MS) {
        return false
      }
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–≤–µ—á–∞–ª —Å–µ–≥–æ–¥–Ω—è
    if (data.lastSurveyAnswered) {
      const timeSinceAnswered = now - data.lastSurveyAnswered
      if (timeSinceAnswered < SURVEY_COOLDOWN_MS) {
        return false
      }
    }

    return true
  }, [getSurveyData])

  // –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ä–æ—Å
  const showSurvey = useCallback(() => {
    if (!canShowSurvey()) {
      return
    }

    const data = getSurveyData()
    data.lastSurveyShown = Date.now()
    saveSurveyData(data)
    
    setSurveyState('showing')
  }, [canShowSurvey, getSurveyData, saveSurveyData])

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
  const submitResponse = useCallback(async (optionId: string, exportContext?: any) => {
    const data = getSurveyData()
    
    const response: SurveyResponse = {
      optionId,
      timestamp: Date.now(),
      exportContext
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    data.surveyResponses.push(response)
    data.lastSurveyAnswered = Date.now()
    saveSurveyData(data)

    setSurveyState('thanking')

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      setSurveyState('hidden')
    }, 3000)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI)
    try {
      console.log('üìß Sending survey response to server...')
      const result = await surveyService.submitSurveyResponse(response)
      
      if (result.success) {
        console.log('‚úÖ Survey response sent successfully')
      } else {
        console.error('‚ùå Failed to send survey response:', result.error)
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ä—Ç–∏—Ç—å UX
      }
    } catch (error) {
      console.error('‚ùå Error sending survey response:', error)
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    }
  }, [getSurveyData, saveSurveyData])

  // –ó–∞–∫—Ä—ã—Ç—å –æ–ø—Ä–æ—Å
  const closeSurvey = useCallback(() => {
    setSurveyState('hidden')
  }, [])

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è –¥–µ–±–∞–≥–∞)
  const getSurveyStats = useCallback((): SurveyData => {
    return getSurveyData()
  }, [getSurveyData])

  return {
    surveyState,
    canShowSurvey,
    showSurvey,
    submitResponse,
    closeSurvey,
    getSurveyStats
  }
}