// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ª–∏–º–∏—Ç–∞—Ö —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ content script

import { authService } from "../../lib/supabase/auth-service"
import { supabase } from "../../lib/supabase"
import type { DailyUsageStats } from "../../lib/supabase/types"

interface LimitWarningData {
  exports_remaining: number
  daily_limit: number
  plan_type: string
  reset_time: string
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–æ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
let warningContainer: HTMLElement | null = null
let lastWarningShown = 0
const WARNING_COOLDOWN = 30000 // 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const getUsageStats = async (): Promise<LimitWarningData | null> => {
  try {
    const authState = authService.getCurrentState()
    if (!authState.isAuthenticated || !authState.user) {
      return null
    }

    const { data, error } = await supabase.rpc('get_usage_stats', {
      user_uuid: authState.user.id
    })

    if (error) {
      console.error('Error getting usage stats:', error)
      return null
    }

    if (data && data.length > 0) {
      return data[0] as LimitWarningData
    }

    return null
  } catch (err) {
    console.error('Error fetching usage stats:', err)
    return null
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
const createWarningStyles = (): string => {
  return `
    .tablexport-limit-warning {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 999999;
      background: linear-gradient(135deg, #ff6b6b, #ee5a52);
      color: white;
      padding: 16px 20px;
      border-radius: 12px;
      box-shadow: 0 8px 32px rgba(255, 107, 107, 0.3);
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      font-size: 14px;
      font-weight: 500;
      max-width: 350px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      backdrop-filter: blur(10px);
      animation: slideInRight 0.4s ease-out;
    }

    .tablexport-limit-warning-yellow {
      background: linear-gradient(135deg, #ffd93d, #f39c12);
      box-shadow: 0 8px 32px rgba(255, 217, 61, 0.3);
    }

    .tablexport-limit-warning-header {
      display: flex;
      align-items: center;
      margin-bottom: 8px;
    }

    .tablexport-limit-warning-icon {
      width: 20px;
      height: 20px;
      margin-right: 8px;
      flex-shrink: 0;
    }

    .tablexport-limit-warning-title {
      font-weight: 600;
      font-size: 15px;
    }

    .tablexport-limit-warning-message {
      margin-bottom: 12px;
      line-height: 1.4;
      opacity: 0.95;
    }

    .tablexport-limit-warning-actions {
      display: flex;
      gap: 8px;
      align-items: center;
    }

    .tablexport-limit-warning-button {
      background: rgba(255, 255, 255, 0.2);
      border: 1px solid rgba(255, 255, 255, 0.3);
      color: white;
      padding: 6px 12px;
      border-radius: 6px;
      font-size: 12px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .tablexport-limit-warning-button:hover {
      background: rgba(255, 255, 255, 0.3);
      transform: translateY(-1px);
    }

    .tablexport-limit-warning-button-primary {
      background: rgba(255, 255, 255, 0.9);
      color: #333;
    }

    .tablexport-limit-warning-button-primary:hover {
      background: white;
    }

    .tablexport-limit-warning-close {
      position: absolute;
      top: 8px;
      right: 8px;
      background: none;
      border: none;
      color: rgba(255, 255, 255, 0.7);
      font-size: 18px;
      cursor: pointer;
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 4px;
      transition: all 0.2s ease;
    }

    .tablexport-limit-warning-close:hover {
      background: rgba(255, 255, 255, 0.2);
      color: white;
    }

    @keyframes slideInRight {
      from {
        transform: translateX(100%);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }

    @keyframes slideOutRight {
      from {
        transform: translateX(0);
        opacity: 1;
      }
      to {
        transform: translateX(100%);
        opacity: 0;
      }
    }

    .tablexport-limit-warning.hiding {
      animation: slideOutRight 0.3s ease-in forwards;
    }
  `
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É
const addWarningStyles = (): void => {
  if (document.getElementById('tablexport-limit-warning-styles')) {
    return
  }

  const style = document.createElement('style')
  style.id = 'tablexport-limit-warning-styles'
  style.textContent = createWarningStyles()
  document.head.appendChild(style)
}

// –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
const createWarningHTML = (data: LimitWarningData): string => {
  const isWarning = data.exports_remaining <= 2 && data.exports_remaining > 0
  const isError = data.exports_remaining === 0
  
  const warningClass = isError ? 'tablexport-limit-warning' : 
                      isWarning ? 'tablexport-limit-warning tablexport-limit-warning-yellow' : 
                      'tablexport-limit-warning'

  const icon = isError ? '‚ö†Ô∏è' : 'üìä'
  const title = isError ? 'Export Limit Reached' : 'Export Limit Warning'
  
  let message = ''
  if (isError) {
    message = `You've used all ${data.daily_limit} daily exports. Upgrade to Pro for unlimited exports or wait for reset.`
  } else if (isWarning) {
    message = `Only ${data.exports_remaining} export${data.exports_remaining === 1 ? '' : 's'} left today. Consider upgrading to Pro for unlimited access.`
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–±—Ä–æ—Å–∞
  const resetTime = new Date(data.reset_time)
  const now = new Date()
  const timeDiff = resetTime.getTime() - now.getTime()
  const hours = Math.floor(timeDiff / (1000 * 60 * 60))
  const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60))
  const resetText = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`

  return `
    <div class="${warningClass}">
      <button class="tablexport-limit-warning-close" onclick="this.parentElement.classList.add('hiding'); setTimeout(() => this.parentElement.remove(), 300)">√ó</button>
      
      <div class="tablexport-limit-warning-header">
        <span class="tablexport-limit-warning-icon">${icon}</span>
        <span class="tablexport-limit-warning-title">${title}</span>
      </div>
      
      <div class="tablexport-limit-warning-message">
        ${message}
        ${data.plan_type === 'free' ? `<br><small>Resets in ${resetText}</small>` : ''}
      </div>
      
      <div class="tablexport-limit-warning-actions">
        ${data.plan_type === 'free' ? '<button class="tablexport-limit-warning-button tablexport-limit-warning-button-primary" onclick="window.open(\'https://tabxport.com/pricing\', \'_blank\')">Upgrade to Pro</button>' : ''}
        <button class="tablexport-limit-warning-button" onclick="this.parentElement.parentElement.classList.add('hiding'); setTimeout(() => this.parentElement.parentElement.remove(), 300)">Dismiss</button>
      </div>
    </div>
  `
}

// –ü–æ–∫–∞–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
const showLimitWarning = (data: LimitWarningData): void => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
  const now = Date.now()
  if (now - lastWarningShown < WARNING_COOLDOWN) {
    return
  }

  // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  hideLimitWarning()

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
  addWarningStyles()

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  warningContainer = document.createElement('div')
  warningContainer.innerHTML = createWarningHTML(data)
  document.body.appendChild(warningContainer)

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    hideLimitWarning()
  }, 10000)

  lastWarningShown = now
  console.log('‚úÖ Limit warning shown:', data)
}

// –°–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
const hideLimitWarning = (): void => {
  if (warningContainer) {
    warningContainer.remove()
    warningContainer = null
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
export const checkAndShowLimitWarning = async (): Promise<void> => {
  try {
    const stats = await getUsageStats()
    if (!stats) {
      return
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å 2 –∏–ª–∏ –º–µ–Ω—å—à–µ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
    if (stats.plan_type === 'free' && stats.exports_remaining <= 2) {
      showLimitWarning(stats)
    }
  } catch (error) {
    console.error('Error checking export limits:', error)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
export const showLimitExceededWarning = async (): Promise<void> => {
  try {
    const stats = await getUsageStats()
    if (!stats) {
      return
    }

    if (stats.plan_type === 'free' && stats.exports_remaining === 0) {
      showLimitWarning(stats)
    }
  } catch (error) {
    console.error('Error showing limit exceeded warning:', error)
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { hideLimitWarning } 