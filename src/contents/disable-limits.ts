/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
 */

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –∏ –ø–æ–¥–º–µ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –æ –ª–∏–º–∏—Ç–∞—Ö
function injectLimitOverride() {
  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  const originalSendMessage = chrome.runtime.sendMessage.bind(chrome.runtime);
  (chrome.runtime as any).sendMessage = function(message: any, ...args: any[]) {
    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if (message && (message.type === 'CHECK_SUBSCRIPTION' || message.type === 'GET_USAGE_STATS')) {
      console.log('üîß Intercepting subscription/usage check and injecting PRO data');

      const proResponse = {
        success: true,
        subscription: {
          id: 'pro-unlimited',
          email: 'pro@unlimited.com',
          planType: 'pro',
          exportsUsed: 0,
          exportsLimit: 999999,
          validUntil: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString()
        },
        usageStats: {
          exports_today: 0,
          daily_limit: 999999,
          exports_remaining: 999999,
          plan_type: 'pro'
        }
      };

      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω callback ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –≤ callback-—Å—Ç–∏–ª–µ
      const maybeCallback = args.find(arg => typeof arg === 'function') as ((response: any) => void) | undefined;
      if (maybeCallback) {
        try {
          maybeCallback(proResponse);
        } catch (e) {
          console.error('Callback error in limit override:', e);
        }
        return; // –≤ callback-—Å—Ç–∏–ª–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
      }

      // –ò–Ω–∞—á–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Promise
      return Promise.resolve(proResponse);
    }
    
    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    return (originalSendMessage as (message: any, ...rest: any[]) => any)(message, ...args);
  };
  
  console.log('‚úÖ Limit override installed - PRO mode activated!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
injectLimitOverride();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { injectLimitOverride };