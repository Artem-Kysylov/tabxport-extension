import { supabase } from '../supabase'
import type { Session } from '@supabase/supabase-js'

interface StoredSession {
  access_token: string
  refresh_token: string
  expires_at: number
  user: any
}

export class SessionManager {
  private static readonly STORAGE_KEY = 'tablexport_session'
  private static refreshTimeout: NodeJS.Timeout | null = null

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –≤ chrome.storage –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
   */
  static async saveSession(session: Session): Promise<void> {
    try {
      const storedSession: StoredSession = {
        access_token: session.access_token,
        refresh_token: session.refresh_token || '',
        expires_at: Date.now() + (session.expires_in || 3600) * 1000,
        user: session.user
      }

      await chrome.storage.local.set({ [this.STORAGE_KEY]: storedSession })
      console.log('‚úÖ Session saved to storage')

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
      this.scheduleTokenRefresh(session.expires_in || 3600)
    } catch (error) {
      console.error('‚ùå Failed to save session:', error)
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–µ—Å—Å–∏—é –∏–∑ storage –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—ë –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
   */
  static async loadSession(): Promise<Session | null> {
    try {
      const result = await chrome.storage.local.get(this.STORAGE_KEY)
      const storedSession: StoredSession = result[this.STORAGE_KEY]

      if (!storedSession) {
        console.log('üì≠ No stored session found')
        return null
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
      if (Date.now() >= storedSession.expires_at) {
        console.log('‚è∞ Session expired, attempting refresh...')
        return await this.refreshSession(storedSession.refresh_token)
      }

      // –°–µ—Å—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞
      const session: Session = {
        access_token: storedSession.access_token,
        refresh_token: storedSession.refresh_token,
        expires_in: Math.floor((storedSession.expires_at - Date.now()) / 1000),
        token_type: 'bearer',
        user: storedSession.user
      }

      console.log('‚úÖ Valid session loaded from storage')
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      this.scheduleTokenRefresh(session.expires_in)
      
      return session
    } catch (error) {
      console.error('‚ùå Failed to load session:', error)
      return null
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É—è refresh_token
   */
  static async refreshSession(refreshToken: string): Promise<Session | null> {
    try {
      console.log('üîÑ Refreshing session...')
      
      const { data, error } = await supabase.auth.refreshSession({
        refresh_token: refreshToken
      })

      if (error) {
        console.error('‚ùå Token refresh failed:', error)
        await this.clearSession()
        return null
      }

      if (data.session) {
        console.log('‚úÖ Session refreshed successfully')
        await this.saveSession(data.session)
        return data.session
      }

      return null
    } catch (error) {
      console.error('‚ùå Failed to refresh session:', error)
      await this.clearSession()
      return null
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –∏–∑ storage –∏ –æ—Ç–º–µ–Ω—è–µ—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
   */
  static async clearSession(): Promise<void> {
    try {
      await chrome.storage.local.remove(this.STORAGE_KEY)
      
      if (this.refreshTimeout) {
        clearTimeout(this.refreshTimeout)
        this.refreshTimeout = null
      }
      
      console.log('üóëÔ∏è Session cleared from storage')
    } catch (error) {
      console.error('‚ùå Failed to clear session:', error)
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
   */
  private static scheduleTokenRefresh(expiresIn: number): void {
    if (this.refreshTimeout) {
      clearTimeout(this.refreshTimeout)
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è (–Ω–æ –Ω–µ –º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É)
    const refreshIn = Math.max(60, expiresIn - 300) * 1000
    
    this.refreshTimeout = setTimeout(async () => {
      console.log('‚è∞ Auto-refreshing token...')
      const currentSession = await this.loadSession()
      
      if (currentSession && currentSession.refresh_token) {
        await this.refreshSession(currentSession.refresh_token)
      }
    }, refreshIn)

    console.log(`‚è∞ Token refresh scheduled in ${Math.floor(refreshIn / 1000 / 60)} minutes`)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   */
  static async isAuthenticated(): Promise<boolean> {
    const session = await this.loadSession()
    return session !== null
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getCurrentUser(): Promise<any | null> {
    const session = await this.loadSession()
    return session?.user || null
  }
} 