// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
export interface FalsePositiveAnalysis {
  element: Element;
  reason: string;
  confidence: number;
  elementInfo: {
    tagName: string;
    className: string;
    textLength: number;
    childrenCount: number;
    hasTableChildren: boolean;
    hasCodeChildren: boolean;
  };
}

export class LiveTableDiagnosis {
  private static instance: LiveTableDiagnosis;
  
  static getInstance(): LiveTableDiagnosis {
    if (!this.instance) {
      this.instance = new LiveTableDiagnosis();
    }
    return this.instance;
  }

  async diagnoseCurrentPage(): Promise<{
    realTables: Element[];
    falsePositives: FalsePositiveAnalysis[];
    summary: string;
  }> {
    console.log('üîç –ù–∞—á–∏–Ω–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã
    const { detectAllTables } = await import('../utils/table-detection');
    const { findAllTables } = await import('../utils/table-detection/legacy-detector');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    const newResults = await detectAllTables();
    const oldResults = findAllTables();
    
    console.log(`üìä –°—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: ${oldResults.length} —Ç–∞–±–ª–∏—Ü`);
    console.log(`üÜï –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: ${newResults.length} —Ç–∞–±–ª–∏—Ü`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const realTables: Element[] = [];
    const falsePositives: FalsePositiveAnalysis[] = [];
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const allFound = new Set([...oldResults, ...newResults]);
    
    for (const element of allFound) {
      const analysis = this.analyzeElement(element);
      
      if (this.isRealTable(element)) {
        realTables.push(element);
        this.highlightElement(element, 'green', '–ù–ê–°–¢–û–Ø–©–ê–Ø –¢–ê–ë–õ–ò–¶–ê');
      } else {
        const falsePositive: FalsePositiveAnalysis = {
          element,
          reason: this.getFalsePositiveReason(element),
          confidence: analysis.confidence,
          elementInfo: analysis
        };
        falsePositives.push(falsePositive);
        this.highlightElement(element, 'red', `–õ–û–ñ–ù–û–ï –°–†–ê–ë–ê–¢–´–í–ê–ù–ò–ï: ${falsePositive.reason}`);
      }
    }
    
    const summary = this.generateSummary(realTables, falsePositives);
    console.log(summary);
    
    return { realTables, falsePositives, summary };
  }

  private analyzeElement(element: Element) {
    const tagName = element.tagName.toLowerCase();
    const className = element.className || '';
    const textLength = element.textContent?.length || 0;
    const childrenCount = element.children.length;
    const hasTableChildren = element.querySelector('table') !== null;
    const hasCodeChildren = element.querySelector('pre, code') !== null;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    let confidence = 0;
    
    if (tagName === 'table') confidence += 0.8;
    if (tagName === 'div' && textLength > 1000) confidence -= 0.3;
    if (hasTableChildren) confidence -= 0.5;
    if (hasCodeChildren) confidence -= 0.4;
    if (childrenCount > 10) confidence -= 0.2;
    if (className.includes('table')) confidence += 0.2;
    if (className.includes('grid') || className.includes('flex')) confidence -= 0.3;
    
    return {
      tagName,
      className,
      textLength,
      childrenCount,
      hasTableChildren,
      hasCodeChildren,
      confidence: Math.max(0, Math.min(1, confidence))
    };
  }

  private isRealTable(element: Element): boolean {
    const tagName = element.tagName.toLowerCase();
    
    // HTML —Ç–∞–±–ª–∏—Ü—ã - –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ
    if (tagName === 'table') {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
    const textLength = element.textContent?.length || 0;
    const hasTableChildren = element.querySelector('table') !== null;
    const hasCodeChildren = element.querySelector('pre, code') !== null;
    const childrenCount = element.children.length;
    const className = element.className || '';
    
    // –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
    if (hasTableChildren) return false; // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –≤–Ω—É—Ç—Ä–∏
    if (hasCodeChildren) return false; // –ë–ª–æ–∫ –∫–æ–¥–∞
    if (textLength > 1000) return false; // –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç
    if (childrenCount > 10 && className.includes('flex')) return false; // Layout –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    
    return true;
  }

  private getFalsePositiveReason(element: Element): string {
    const textLength = element.textContent?.length || 0;
    const hasTableChildren = element.querySelector('table') !== null;
    const hasCodeChildren = element.querySelector('pre, code') !== null;
    const childrenCount = element.children.length;
    const className = element.className || '';
    const tagName = element.tagName.toLowerCase();
    
    if (hasTableChildren) return '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã';
    if (hasCodeChildren) return '–ë–ª–æ–∫ —Å –∫–æ–¥–æ–º';
    if (textLength > 1000) return `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (${textLength} —Å–∏–º–≤–æ–ª–æ–≤)`;
    if (childrenCount > 10 && (className.includes('flex') || className.includes('grid'))) {
      return 'Layout –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏';
    }
    if (tagName === 'div' && className.includes('overflow')) return 'Overflow –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä';
    
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞';
  }

  private highlightElement(element: Element, color: string, label: string): void {
    const htmlElement = element as HTMLElement;
    htmlElement.style.border = `3px solid ${color}`;
    htmlElement.style.position = 'relative';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–π–±–ª
    const labelEl = document.createElement('div');
    labelEl.textContent = label;
    labelEl.style.cssText = `
      position: absolute;
      top: -25px;
      left: 0;
      background: ${color};
      color: white;
      padding: 2px 8px;
      font-size: 12px;
      font-weight: bold;
      z-index: 10000;
      border-radius: 3px;
    `;
    
    htmlElement.appendChild(labelEl);
    
    // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      htmlElement.style.border = '';
      labelEl.remove();
    }, 10000);
  }

  private generateSummary(realTables: Element[], falsePositives: FalsePositiveAnalysis[]): string {
    let summary = `\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:\n`;
    summary += `‚úÖ –ù–∞—Å—Ç–æ—è—â–∏—Ö —Ç–∞–±–ª–∏—Ü: ${realTables.length}\n`;
    summary += `‚ùå –õ–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: ${falsePositives.length}\n\n`;
    
    if (falsePositives.length > 0) {
      summary += `üî¥ –õ–û–ñ–ù–´–ï –°–†–ê–ë–ê–¢–´–í–ê–ù–ò–Ø:\n`;
      falsePositives.forEach((fp, index) => {
        summary += `${index + 1}. ${fp.elementInfo.tagName.toUpperCase()}`;
        if (fp.elementInfo.className) {
          summary += ` (class: ${fp.elementInfo.className.substring(0, 30)}...)`;
        }
        summary += `\n   –ü—Ä–∏—á–∏–Ω–∞: ${fp.reason}\n`;
        summary += `   –¢–µ–∫—Å—Ç: ${fp.elementInfo.textLength} —Å–∏–º–≤–æ–ª–æ–≤, –î–µ—Ç–∏: ${fp.elementInfo.childrenCount}\n`;
        summary += `   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(fp.confidence * 100).toFixed(1)}%\n\n`;
      });
    }
    
    return summary;
  }

  clearHighlights(): void {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    document.querySelectorAll('[style*="border: 3px solid"]').forEach(el => {
      (el as HTMLElement).style.border = '';
      el.querySelectorAll('[style*="position: absolute"][style*="top: -25px"]').forEach(label => {
        label.remove();
      });
    });
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
declare global {
  interface Window {
    TabXportLiveDiagnosis?: () => Promise<void>;
    TabXportClearHighlights?: () => void;
  }
}

if (typeof window !== 'undefined') {
  window.TabXportLiveDiagnosis = async () => {
    const diagnosis = LiveTableDiagnosis.getInstance();
    await diagnosis.diagnoseCurrentPage();
  };
  
  window.TabXportClearHighlights = () => {
    const diagnosis = LiveTableDiagnosis.getInstance();
    diagnosis.clearHighlights();
  };
} 