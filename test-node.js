#!/usr/bin/env node

// –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Node.js
console.log('üß™ TabXport - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
console.log('================================================');

// –ü—Ä–æ—Å—Ç–∞—è —ç–º—É–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è Node.js —Å—Ä–µ–¥—ã
const testData = {
  markdown: {
    headers: ['**Name**', '`Age`', '|City|', '~~Status~~'],
    rows: [
      ['John Doe', '25', '|New York|', '~~Active~~'],
      ['**Jane Smith**', '`30`', '|Los Angeles|'], // –ü—Ä–æ–ø—É—â–µ–Ω–∞ —è—á–µ–π–∫–∞
      ['Bob Johnson', '35', '|Chicago|', '**Active**', 'Extra'] // –õ–∏—à–Ω—è—è —è—á–µ–π–∫–∞
    ]
  },
  
  broken: {
    headers: ['ID', 'Name', 'Email'],
    rows: [
      ['1', 'John'],           // –ü—Ä–æ–ø—É—â–µ–Ω–∞ —è—á–µ–π–∫–∞
      ['2', 'Jane', 'jane@example.com', 'Extra'],  // –õ–∏—à–Ω—è—è —è—á–µ–π–∫–∞
      ['3', 'Bob', 'bob@example.com']
    ]
  },
  
  unicode: {
    headers: ['Na√Øve', 'Caf√©', 'R√©sum√©'],
    rows: [
      ['Andr√©', 'Fran√ßois', 'Jos√©'],
      ['M√ºller', 'Bj√∂rk', '√Öse'],
      ['–ú–æ—Å–∫–≤–∞', 'Âåó‰∫¨', 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©']
    ]
  }
};

// –≠–º—É–ª—è—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function analyzeTable(headers, rows) {
  const structure = {
    hasHeaders: headers.length > 0,
    headerRowCount: headers.length > 0 ? 1 : 0,
    columnCount: Math.max(headers.length, ...rows.map(row => row.length)),
    rowCount: rows.length,
    hasMergedCells: false,
    inconsistentColumns: rows.some(row => row.length !== headers.length),
    detectedFormat: headers.some(h => h.includes('|') || h.includes('**')) ? 'markdown' : 'text'
  };

  const issues = [];
  
  if (!structure.hasHeaders) {
    issues.push({ type: 'missing-headers', severity: 'medium', description: '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤' });
  }
  
  if (structure.inconsistentColumns) {
    issues.push({ type: 'inconsistent-columns', severity: 'medium', description: '–†–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫' });
  }
  
  const hasArtifacts = [...headers, ...rows.flat()].some(cell => 
    cell.includes('**') || cell.includes('`') || cell.includes('|') || cell.includes('~~')
  );
  
  if (hasArtifacts) {
    issues.push({ type: 'text-artifacts', severity: 'low', description: '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' });
  }

  return { structure, issues };
}

function simulateFormat(headers, rows, platform = 'other') {
  const start = Date.now();
  
  // –û—á–∏—Å—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const cleanHeaders = headers.map(h => 
    h.replace(/\*\*/g, '')
     .replace(/`/g, '')
     .replace(/\|/g, '')
     .replace(/~~/g, '')
     .trim()
  );
  
  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
  const maxCols = Math.max(cleanHeaders.length, ...rows.map(r => r.length));
  const normalizedRows = rows.map(row => {
    const newRow = [...row];
    
    // –î–æ–ø–æ–ª–Ω—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
    while (newRow.length < maxCols) {
      newRow.push('');
    }
    
    // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (newRow.length > maxCols) {
      newRow.splice(maxCols);
    }
    
    // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–µ–∫
    return newRow.map(cell => 
      cell.replace(/\*\*/g, '')
          .replace(/`/g, '')
          .replace(/\|/g, '')
          .replace(/~~/g, '')
          .trim()
    );
  });
  
  const processingTime = Date.now() - start;
  
  return {
    headers: cleanHeaders,
    rows: normalizedRows,
    originalHeaders: headers,
    originalRows: rows,
    processingTime,
    platform,
    operations: [
      { type: 'markdown-processed', description: '–£–¥–∞–ª–µ–Ω—ã Markdown —Å–∏–º–≤–æ–ª—ã' },
      { type: 'structure-fixed', description: '–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫' }
    ]
  };
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function runTest(testName, data) {
  console.log(`\nüî¨ –¢–µ—Å—Ç: ${testName}`);
  console.log('‚îÄ'.repeat(50));
  
  // –ê–Ω–∞–ª–∏–∑
  const analysis = analyzeTable(data.headers, data.rows);
  
  console.log('üìä –ê–Ω–∞–ª–∏–∑:');
  console.log(`   –ó–∞–≥–æ–ª–æ–≤–∫–æ–≤: ${analysis.structure.columnCount}`);
  console.log(`   –°—Ç—Ä–æ–∫: ${analysis.structure.rowCount}`);
  console.log(`   –§–æ—Ä–º–∞—Ç: ${analysis.structure.detectedFormat}`);
  console.log(`   –ü—Ä–æ–±–ª–µ–º—ã: ${analysis.issues.length}`);
  
  if (analysis.issues.length > 0) {
    console.log('   –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º:');
    analysis.issues.forEach(issue => {
      console.log(`     ‚Ä¢ ${issue.description} (${issue.severity})`);
    });
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  const platforms = ['chatgpt', 'claude', 'gemini'];
  platforms.forEach(platform => {
    const result = simulateFormat(data.headers, data.rows, platform);
    
    console.log(`\nüõ† –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ${platform}:`);
    console.log(`   –í—Ä–µ–º—è: ${result.processingTime}–º—Å`);
    console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: [${result.originalHeaders.map(h => `"${h}"`).join(', ')}]`);
    console.log(`   –û—á–∏—â–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: [${result.headers.map(h => `"${h}"`).join(', ')}]`);
    console.log(`   –û–ø–µ—Ä–∞—Ü–∏–π: ${result.operations.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    if (result.rows.length > 0) {
      console.log(`   –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏:`);
      console.log(`     –î–æ:  [${result.originalRows[0].map(c => `"${c}"`).join(', ')}]`);
      console.log(`     –ü–æ—Å–ª–µ: [${result.rows[0].map(c => `"${c}"`).join(', ')}]`);
    }
  });
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n');

Object.entries(testData).forEach(([name, data]) => {
  runTest(name, data);
});

console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
console.log('\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ –æ—Ç–∫—Ä–æ–π—Ç–µ: test-formatting-manual.html');
console.log('üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∏—Ç–µ build/chrome-mv3 –≤ Chrome'); 