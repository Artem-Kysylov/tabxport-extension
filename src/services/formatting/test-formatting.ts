import { TableFormatterService, FormattingUtils } from './index';

/**
 * –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ù–ï –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
const testData = {
  // Markdown —Ç–∞–±–ª–∏—Ü–∞ —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ (ChatGPT —Å—Ç–∏–ª—å)
  markdownTable: {
    headers: ['**Name**', '`Age`', '|City|'],
    rows: [
      ['John Doe', '25', '|New York|'],
      ['Jane Smith', '30', '|Los Angeles|'],
      ['**Bob Johnson**', '`35`', '|Chicago|']
    ]
  },

  // –¢–∞–±–ª–∏—Ü–∞ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ —è—á–µ–π–∫–∞–º–∏ (–ø—Ä–æ–±–ª–µ–º–∞)
  mergedCellsTable: {
    headers: ['Product', 'Q1', 'Q2'],
    rows: [
      ['Laptop', '100', '120'],
      ['Phone', '200'], // –ü—Ä–æ–ø—É—â–µ–Ω–∞ —è—á–µ–π–∫–∞
      ['Tablet', '150', '180', 'Extra'] // –õ–∏—à–Ω—è—è —è—á–µ–π–∫–∞
    ]
  },

  // –¢–µ–∫—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ Claude-—Å—Ç–∏–ª—å
  claudeTextTable: {
    headers: ['Name    ', 'Score   ', 'Grade'],
    rows: [
      ['Alice   ', '95      ', 'A'],
      ['Bob     ', '87      ', 'B'],
      ['Charlie ', '92      ', 'A-']
    ]
  },

  // –¢–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
  encodingIssuesTable: {
    headers: ['Na√Øve', 'Caf√©', 'R√©sum√©'],
    rows: [
      ['Andr√©', 'Fran√ßo√≠s', 'Jos√©'],
      ['M√ºller', 'Bj√∂rk', '√Öse']
    ]
  }
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è)
 */
async function runManualTests() {
  console.log('üß™ TabXport: Starting manual formatting tests...');

  // –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
  console.log('\nüìä Test 1: Table Analysis');
  Object.entries(testData).forEach(([name, data]) => {
    const analysis = FormattingUtils.analyzeTable(data.headers, data.rows);
    console.log(`\n${name}:`);
    console.log(`  Issues: ${analysis.issues.length}`);
    console.log(`  Suggestions: ${analysis.suggestions.length}`);
    console.log(`  Format: ${analysis.structure.detectedFormat}`);
    console.log(`  Needs formatting: ${FormattingUtils.needsFormatting(data.headers, data.rows)}`);
  });

  // –¢–µ—Å—Ç 2: –ë—ã—Å—Ç—Ä–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  console.log('\nüöÄ Test 2: Quick Formatting');
  for (const [name, data] of Object.entries(testData)) {
    console.log(`\nFormatting ${name}...`);
    try {
      const result = await FormattingUtils.quickFormat(data.headers, data.rows, 'chatgpt');
      console.log(`  Operations applied: ${result.formattingApplied.length}`);
      console.log(`  Processing time: ${result.processingTime}ms`);
      console.log(`  Headers: ${result.headers.length} -> ${result.originalHeaders.length}`);
      console.log(`  Rows: ${result.rows.length} -> ${result.originalRows.length}`);
    } catch (error) {
      console.error(`  Error: ${error}`);
    }
  }

  // –¢–µ—Å—Ç 3: –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  console.log('\nüéØ Test 3: Platform-specific Options');
  const platforms: Array<'chatgpt' | 'claude' | 'gemini' | 'deepseek'> = ['chatgpt', 'claude', 'gemini', 'deepseek'];
  
  platforms.forEach(platform => {
    const options = FormattingUtils.getRecommendedOptions(platform);
    console.log(`\n${platform}:`);
    console.log(`  Cleaning level: ${options.cleaningLevel}`);
    console.log(`  Remove Markdown: ${options.removeMarkdownSymbols}`);
    console.log(`  Normalize diacritics: ${options.normalizeDiacritics}`);
    console.log(`  Fix merged cells: ${options.fixMergedCells}`);
  });

  console.log('\n‚úÖ Manual tests completed!');
  console.log('üìù Note: Check console output for detailed results');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–∑–æ–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== 'undefined') {
  (window as any).testTabXportFormatting = runManualTests;
}

// –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
export const examples = {
  basicUsage: async () => {
    const headers = ['**Name**', 'Age', '|City|'];
    const rows = [['John', '25', '|NYC|']];
    
    return await TableFormatterService.formatTable(headers, rows);
  },

  quickAnalysis: () => {
    const headers = ['Name', 'Age'];
    const rows = [['John'], ['Jane', '30', 'Extra']]; // –ü—Ä–æ–±–ª–µ–º–∞: —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫
    
    return FormattingUtils.analyzeTable(headers, rows);
  },

  platformSpecific: async () => {
    const headers = ['Task', 'Status'];
    const rows = [['**Important**', '`Done`']];
    const options = FormattingUtils.getRecommendedOptions('chatgpt');
    
    return await TableFormatterService.formatTable(headers, rows, options, 'chatgpt');
  }
}; 