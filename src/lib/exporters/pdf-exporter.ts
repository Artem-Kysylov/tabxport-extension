import jsPDF from "jspdf"
import autoTable from "jspdf-autotable"

import type { ExportOptions, ExportResult, TableData } from "../../types"
import { generateFilename } from "../export"
import { googleDriveService } from "../google-drive-api"

/**
 * PDF —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –¥–ª—è TabXport —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: A4, Landscape, —Å borders –∏ UTF-8 –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
 */

/**
 * –ö–∞—Ä—Ç–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
 */
const CYRILLIC_TO_LATIN_MAP: Record<string, string> = {
  // –†—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
  –∞: "a",
  –±: "b",
  –≤: "v",
  –≥: "g",
  –¥: "d",
  –µ: "e",
  —ë: "yo",
  –∂: "zh",
  –∑: "z",
  –∏: "i",
  –π: "y",
  –∫: "k",
  –ª: "l",
  –º: "m",
  –Ω: "n",
  –æ: "o",
  –ø: "p",
  —Ä: "r",
  —Å: "s",
  —Ç: "t",
  —É: "u",
  —Ñ: "f",
  —Ö: "h",
  —Ü: "ts",
  —á: "ch",
  —à: "sh",
  —â: "sch",
  —ä: "",
  —ã: "y",
  —å: "",
  —ç: "e",
  —é: "yu",
  —è: "ya",

  // –ó–∞–≥–ª–∞–≤–Ω—ã–µ
  –ê: "A",
  –ë: "B",
  –í: "V",
  –ì: "G",
  –î: "D",
  –ï: "E",
  –Å: "Yo",
  –ñ: "Zh",
  –ó: "Z",
  –ò: "I",
  –ô: "Y",
  –ö: "K",
  –õ: "L",
  –ú: "M",
  –ù: "N",
  –û: "O",
  –ü: "P",
  –†: "R",
  –°: "S",
  –¢: "T",
  –£: "U",
  –§: "F",
  –•: "H",
  –¶: "Ts",
  –ß: "Ch",
  –®: "Sh",
  –©: "Sch",
  –™: "",
  –´: "Y",
  –¨: "",
  –≠: "E",
  –Æ: "Yu",
  –Ø: "Ya",

  // –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã
  —î: "ye",
  —ñ: "i",
  —ó: "yi",
  “ë: "g",
  –Ñ: "Ye",
  –Ü: "I",
  –á: "Yi",
  “ê: "G",

  // –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
  —û: "u",
  –é: "U"
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ArrayBuffer –≤ base64
 */
const arrayBufferToBase64 = (buffer: ArrayBuffer): string => {
  const bytes = new Uint8Array(buffer)
  let binary = ""
  for (let i = 0; i < bytes.byteLength; i++) {
    binary += String.fromCharCode(bytes[i])
  }
  return btoa(binary)
}

/**
 * Converts data URL to blob for Google Drive upload
 */
const dataUrlToBlob = (dataUrl: string): Blob => {
  const arr = dataUrl.split(',')
  const mime = arr[0].match(/:(.*?);/)?.[1] || 'application/octet-stream'
  const bstr = atob(arr[1])
  let n = bstr.length
  const u8arr = new Uint8Array(n)
  while (n--) {
    u8arr[n] = bstr.charCodeAt(n)
  }
  return new Blob([u8arr], { type: mime })
}

/**
 * Uploads PDF file to Google Drive
 */
const uploadToGoogleDrive = async (
  filename: string,
  dataUrl: string
): Promise<{ success: boolean; error?: string; webViewLink?: string }> => {
  try {
    const blob = dataUrlToBlob(dataUrl)
    const mimeType = 'application/pdf'
    
    console.log(`‚òÅÔ∏è Uploading PDF to Google Drive: ${filename} (${blob.size} bytes)`)
    
    const result = await googleDriveService.uploadFile({
      filename,
      content: blob,
      mimeType
    })
    
    if (result.success) {
      console.log(`‚úÖ Successfully uploaded PDF to Google Drive: ${filename}`)
      return { success: true, webViewLink: result.webViewLink }
    } else {
      console.error(`‚ùå Failed to upload PDF to Google Drive: ${result.error}`)
      return { success: false, error: result.error }
    }
  } catch (error) {
    console.error('üí• Error uploading PDF to Google Drive:', error)
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Upload failed' 
    }
  }
}

/**
 * –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É –¥–ª—è PDF
 */
const transliterateCyrillic = (text: string): string => {
  if (!text) return ""

  return text.replace(/[\u0400-\u04FF]/g, (char) => {
    return CYRILLIC_TO_LATIN_MAP[char] || char
  })
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è PDF
 */
const encodeTextForPDF = (text: string): string => {
  if (!text) return ""

  // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç
  const cleanText = text
    .replace(/[\u200B-\u200D\uFEFF]/g, "") // –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    .replace(/\u00A0/g, " ") // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–±—ã—á–Ω—ã–µ
    .normalize("NFKC") // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º Unicode
    .trim()

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
  return transliterateCyrillic(cleanText)
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
const addPDFHeader = (doc: jsPDF, tableData: TableData): number => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–∞—Ç–∏–Ω–∏—Ü—ã
  doc.setFont("helvetica", "bold")
  doc.setFontSize(16)
  doc.setTextColor(40, 40, 40)

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const sourceTitle =
    tableData.source.charAt(0).toUpperCase() + tableData.source.slice(1)
  let title = `Table from ${sourceTitle}`

  if (tableData.chatTitle && tableData.chatTitle !== `${sourceTitle}_Chat`) {
    const cleanChatTitle = encodeTextForPDF(tableData.chatTitle)
    if (cleanChatTitle.length > 0) {
      title = `Table from ${cleanChatTitle}`
    }
  }

  // –ö–æ–¥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è PDF
  const encodedTitle = encodeTextForPDF(title)

  // –†–∞–∑–º–µ—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ (—Å —É—á–µ—Ç–æ–º landscape)
  const pageWidth = doc.internal.pageSize.getWidth()
  const textWidth = doc.getTextWidth(encodedTitle)
  const xPosition = (pageWidth - textWidth) / 2

  doc.text(encodedTitle, xPosition, 20)

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Y –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  return 35
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –≤ —Ñ—É—Ç–µ—Ä
 */
const addPDFFooter = (doc: jsPDF, tableData: TableData): void => {
  const pageHeight = doc.internal.pageSize.getHeight()
  const pageWidth = doc.internal.pageSize.getWidth()

  doc.setFont("helvetica", "normal")
  doc.setFontSize(9)
  doc.setTextColor(100, 100, 100)

  const sourceTitle =
    tableData.source.charAt(0).toUpperCase() + tableData.source.slice(1)
  const footerText = `Exported from ${sourceTitle} at ${new Date().toLocaleString()} ‚Ä¢ Generated by TabXport`
  const encodedFooterText = encodeTextForPDF(footerText)

  const textWidth = doc.getTextWidth(encodedFooterText)
  const xPosition = (pageWidth - textWidth) / 2

  doc.text(encodedFooterText, xPosition, pageHeight - 10)
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
 */
export const exportToPDF = async (
  tableData: TableData,
  options: ExportOptions & { tableIndex?: number }
): Promise<ExportResult> => {
  try {
    console.log("Starting PDF export for:", tableData.source)
    console.log("PDF export sample data:", {
      headers: tableData.headers.slice(0, 2),
      firstRow: tableData.rows[0]?.slice(0, 2),
      chatTitle: tableData.chatTitle
    })

    // –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∞–ª—å–±–æ–º–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ A4
    const doc = new jsPDF({
      orientation: "landscape",
      unit: "mm",
      format: "a4",
      compress: true
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const startY = addPDFHeader(doc, tableData)

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const tableHeaders = options.includeHeaders
      ? tableData.headers.map((header) => encodeTextForPDF(header))
      : []

    const tableRows = tableData.rows.map((row) =>
      row.map((cell) => encodeTextForPDF(cell))
    )

    console.log("PDF export encoded data (with transliteration):", {
      headers: tableHeaders.slice(0, 2),
      firstRow: tableRows[0]?.slice(0, 2)
    })

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–µ–π —Ç–∞–±–ª–∏—Ü—ã
    const tableConfig = {
      startY: startY,
      head: options.includeHeaders ? [tableHeaders] : undefined,
      body: tableRows,
      theme: "grid" as const, // –¢–∞–±–ª–∏—Ü–∞ —Å borders
      headStyles: {
        fillColor: [27, 147, 88] as [number, number, number], // –ë—Ä–µ–Ω–¥–æ–≤—ã–π –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç #1B9358
        textColor: [255, 255, 255] as [number, number, number],
        fontStyle: "bold" as "bold",
        fontSize: 10,
        font: "helvetica"
      },
      bodyStyles: {
        fontSize: 9,
        font: "helvetica",
        textColor: [40, 40, 40] as [number, number, number]
      },
      styles: {
        lineWidth: 0.1,
        lineColor: [128, 128, 128] as [number, number, number],
        cellPadding: 3,
        fontSize: 9,
        font: "helvetica"
      },
      columnStyles: {}, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
      margin: {
        top: startY,
        left: 14,
        right: 14,
        bottom: 25
      },
      didDrawPage: (data: any) => {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É—Ç–µ—Ä –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        addPDFFooter(doc, tableData)
      }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    autoTable(doc, tableConfig)

    // –ü–æ–ª—É—á–∞–µ–º PDF –∫–∞–∫ ArrayBuffer
    const pdfArrayBuffer = doc.output("arraybuffer")

    // –°–æ–∑–¥–∞–µ–º filename
    const filename = generateFilename(
      tableData,
      "pdf",
      options.filename,
      options.tableIndex
    )

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ data URL
    const base64 = arrayBufferToBase64(pdfArrayBuffer)
    const dataUrl = `data:application/pdf;base64,${base64}`

    // Handle Google Drive upload if needed
    if (options.destination === 'google_drive') {
      const uploadResult = await uploadToGoogleDrive(filename, dataUrl)
      
      if (uploadResult.success) {
        console.log("PDF export and upload to Google Drive completed successfully with transliteration")
        return {
          success: true,
          filename,
          downloadUrl: uploadResult.webViewLink || dataUrl  // Use webViewLink or fallback to dataUrl
        }
      } else {
        return {
          success: false,
          error: `Google Drive upload failed: ${uploadResult.error}`
        }
      }
    }

    console.log("PDF export completed successfully with transliteration")

    return {
      success: true,
      filename,
      downloadUrl: dataUrl
    }
  } catch (error) {
    console.error("Error exporting to PDF:", error)
    return {
      success: false,
      error:
        error instanceof Error
          ? error.message
          : "Unknown error occurred during PDF export"
    }
  }
}
