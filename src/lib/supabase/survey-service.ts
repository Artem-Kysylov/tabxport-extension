import { supabase } from "../supabase"
import { authService } from "./auth-service"
import type { SurveyResponse } from "../../types/survey"

export interface SurveySubmissionData {
  optionId: string
  optionText: string
  timestamp: number
  userEmail?: string
  exportContext?: {
    format?: string
    tableCount?: number
    destination?: string
    exportType?: 'single' | 'batch'
    platform?: string
  }
}

export class SurveyService {
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –æ–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email
   */
  async submitSurveyResponse(response: SurveyResponse): Promise<{ success: boolean; error?: string }> {
    try {
      console.log('üìß Submitting survey response...', response)

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const authState = authService.getCurrentState()
      const userEmail = authState.user?.email

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
      const { SURVEY_OPTIONS } = await import('../../types/survey')
      const selectedOption = SURVEY_OPTIONS.find(opt => opt.id === response.optionId)
      
      const submissionData: SurveySubmissionData = {
        optionId: response.optionId,
        optionText: selectedOption?.text || response.optionId,
        timestamp: response.timestamp,
        userEmail,
        exportContext: response.exportContext
      }

      // –í—ã–∑—ã–≤–∞–µ–º Edge Function –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
      const { data, error } = await supabase.functions.invoke('submit-survey-response', {
        body: submissionData
      })

      if (error) {
        console.error('‚ùå Error submitting survey response:', error)
        return { success: false, error: error.message }
      }

      console.log('‚úÖ Survey response submitted successfully:', data)
      return { success: true }

    } catch (error) {
      console.error('‚ùå Survey submission error:', error)
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error' 
      }
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –æ–ø—Ä–æ—Å–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ content script)
   */
  async submitSurveyResponseSimple(optionId: string, exportContext?: any): Promise<{ success: boolean; error?: string }> {
    try {
      const response: SurveyResponse = {
        optionId,
        timestamp: Date.now(),
        exportContext
      }

      return await this.submitSurveyResponse(response)
    } catch (error) {
      console.error('‚ùå Simple survey submission error:', error)
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error' 
      }
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
export const surveyService = new SurveyService()