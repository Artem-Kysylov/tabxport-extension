import * as XLSX from "xlsx"

import type { ExportOptions, ExportResult, TableData } from "../types"
import { exportToDOCX } from "./exporters/docx-exporter"
import { exportToPDF } from "./exporters/pdf-exporter"
import { googleDriveService } from "./google-drive-api"
import { googleSheetsService } from "./google-sheets-api"
import { getDefaultCsvSeparator } from "../services/export/utils"
import { GOOGLE_DRIVE_ENABLED, GOOGLE_SHEETS_ENABLED } from "../services/feature-flags"

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
export const generateFilename = (
  tableData: TableData,
  format: "xlsx" | "csv" | "docx" | "pdf" | "google_sheets",
  customName?: string,
  tableIndex?: number
): string => {
  if (customName) {
    // Google Sheets doesn't use file extensions
    return format === "google_sheets" ? customName : `${customName}.${format}`
  }

  const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, "-")
  const source =
    tableData.source.charAt(0).toUpperCase() + tableData.source.slice(1)

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è batch export, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–ª–ª–∏–∑–∏–π –∏–º–µ–Ω
  const tableNumberSuffix = tableIndex !== undefined ? `_${tableIndex + 1}` : ""

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è
  if (tableData.chatTitle && tableData.chatTitle !== `${source}_Chat`) {
    // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞)
    const cleanChatTitle = tableData.chatTitle
      .replace(/[<>:"/\\|?*]/g, "")
      .replace(/\s+/g, "_")
      .substring(0, 40) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞

    return format === "google_sheets" 
      ? `${cleanChatTitle}_Table${tableNumberSuffix}_${timestamp}`
      : `${cleanChatTitle}_Table${tableNumberSuffix}_${timestamp}.${format}`
  }

  return format === "google_sheets"
    ? `${source}_Table${tableNumberSuffix}_${timestamp}`
    : `${source}_Table${tableNumberSuffix}_${timestamp}.${format}`
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TableData –≤ worksheet
export const tableDataToWorksheet = (
  tableData: TableData,
  includeHeaders: boolean = true
): XLSX.WorkSheet => {
  const data: string[][] = []

  if (includeHeaders && tableData.headers.length > 0) {
    data.push(tableData.headers)
  }

  data.push(...tableData.rows)

  const worksheet = XLSX.utils.aoa_to_sheet(data)

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
  const colWidths: { wch: number }[] = []
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
  const maxCols = Math.max(
    includeHeaders ? (tableData.headers?.length || 0) : 0,
    ...tableData.rows.map(row => row?.length || 0)
  )

  // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
  for (let col = 0; col < maxCols; col++) {
    let maxWidth = 8 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if (includeHeaders && tableData.headers[col]) {
      maxWidth = Math.max(maxWidth, String(tableData.headers[col]).length)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    for (const row of tableData.rows) {
      if (row[col] !== undefined && row[col] !== null) {
        const cellValue = String(row[col])
        maxWidth = Math.max(maxWidth, cellValue.length)
      }
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    maxWidth = Math.min(maxWidth, 50)
    
    colWidths.push({ wch: maxWidth })
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
  worksheet['!cols'] = colWidths

  return worksheet
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ArrayBuffer –≤ base64
const arrayBufferToBase64 = (buffer: ArrayBuffer): string => {
  const bytes = new Uint8Array(buffer)
  let binary = ""
  for (let i = 0; i < bytes.byteLength; i++) {
    binary += String.fromCharCode(bytes[i])
  }
  return btoa(binary)
}

/**
 * Converts data URL to blob for Google Drive upload
 */
const dataUrlToBlob = (dataUrl: string): Blob => {
  const arr = dataUrl.split(',')
  const mime = arr[0].match(/:(.*?);/)?.[1] || 'application/octet-stream'
  const bstr = atob(arr[1])
  let n = bstr.length
  const u8arr = new Uint8Array(n)
  while (n--) {
    u8arr[n] = bstr.charCodeAt(n)
  }
  return new Blob([u8arr], { type: mime })
}

/**
 * Gets MIME type for Google Drive upload
 */
const getMimeTypeForFormat = (format: "xlsx" | "csv" | "docx" | "pdf"): string => {
  switch (format) {
    case 'xlsx':
      return 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    case 'csv':
      return 'text/csv'
    case 'docx':
      return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    case 'pdf':
      return 'application/pdf'
    default:
      return 'application/octet-stream'
  }
}

/**
 * Uploads file to Google Drive
 */
// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Drive
const uploadToGoogleDrive = async (
  filename: string,
  dataUrl: string,
  format: "xlsx" | "csv" | "docx" | "pdf"
): Promise<{ success: boolean; error?: string; webViewLink?: string }> => {
  try {
    if (!GOOGLE_DRIVE_ENABLED) {
      return { success: false, error: "Google Drive export is disabled in this version" }
    }

    const blob = dataUrlToBlob(dataUrl)
    const mimeType = getMimeTypeForFormat(format)

    const { googleDriveService } = await import("./google-drive-api")

    const result = await googleDriveService.uploadFile({
      filename,
      content: blob,
      mimeType
    })
    
    if (result.success) {
      // —É–¥–∞–ª—ë–Ω –ª–∏—à–Ω–∏–π console.log: Successfully uploaded to Google Drive
      return { success: true, webViewLink: result.webViewLink }
    } else {
      console.error(`‚ùå Failed to upload to Google Drive: ${result.error}`)
      return { success: false, error: result.error }
    }
  } catch (error) {
    console.error('üí• Error uploading to Google Drive:', error)
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Upload failed' 
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ XLSX —Ñ–æ—Ä–º–∞—Ç
export const exportToXLSX = async (
  tableData: TableData,
  options: ExportOptions & { tableIndex?: number }
): Promise<ExportResult> => {
  try {
    const worksheet = tableDataToWorksheet(tableData, options.includeHeaders)
    const workbook = XLSX.utils.book_new()

    XLSX.utils.book_append_sheet(workbook, worksheet, "Table")

    const filename = generateFilename(
      tableData,
      "xlsx",
      options.filename,
      options.tableIndex
    )
    const buffer = XLSX.write(workbook, { type: "array", bookType: "xlsx" })

    // –°–æ–∑–¥–∞–µ–º data URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const base64 = arrayBufferToBase64(buffer)
    const dataUrl = `data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,${base64}`

    // Handle Google Drive upload if needed
    if (options.destination === 'google_drive') {
      if (!GOOGLE_DRIVE_ENABLED) {
        return { success: false, error: "Google Drive destination is disabled in this version" }
      }
      const uploadResult = await uploadToGoogleDrive(filename, dataUrl, 'xlsx')
      
      if (uploadResult.success) {
        return {
          success: true,
          filename,
          downloadUrl: uploadResult.webViewLink || dataUrl  // Use webViewLink or fallback to dataUrl
        }
      } else {
        return {
          success: false,
          error: `Google Drive upload failed: ${uploadResult.error}`
        }
      }
    }

    return {
      success: true,
      filename,
      downloadUrl: dataUrl
    }
  } catch (error) {
    console.error("Error exporting to XLSX:", error)
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error occurred"
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç –≤ CSV
const formatCellForCSV = (cell: string): string => {
  const cellStr = String(cell || "").trim()
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç–æ–π/–≤—Ä–µ–º–µ–Ω–µ–º
  const datePatterns = [
    /^\d{4}-\d{2}-\d{2}$/,                    // YYYY-MM-DD
    /^\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}$/,      // YYYY-MM-DD HH:MM
    /^\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}$/, // YYYY-MM-DD HH:MM:SS
    /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/,  // ISO format
    /^\d{2}\/\d{2}\/\d{4}$/,                 // MM/DD/YYYY
    /^\d{2}\/\d{2}\/\d{4}\s\d{2}:\d{2}$/,     // MM/DD/YYYY HH:MM
    /^\d{2}\.\d{2}\.\d{4}$/,                 // DD.MM.YYYY
    /^\d{2}\.\d{2}\.\d{4}\s\d{2}:\d{2}$/      // DD.MM.YYYY HH:MM
  ]
  
  const isDate = datePatterns.some(pattern => pattern.test(cellStr))
  
  if (isDate) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –ø–æ–Ω—è—Ç–Ω—ã–π Excel —Ñ–æ—Ä–º–∞—Ç –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –∫–∞–≤—ã—á–∫–∏
    // –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç Excel –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç, –∞ –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å
    return `"${cellStr}"`
  }
  
  return cellStr
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CSV –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∞—Ç
const createCSVFromTableData = (
  tableData: TableData,
  includeHeaders: boolean,
  separator: string
): string => {
  const rows: string[] = []
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (includeHeaders && tableData.headers.length > 0) {
    const headerRow = tableData.headers
      .map(header => {
        const cleanHeader = String(header || "").trim()
        if (cleanHeader.includes(separator) || cleanHeader.includes('"') || cleanHeader.includes("\n")) {
          return `"${cleanHeader.replace(/"/g, '""')}"`
        }
        return cleanHeader
      })
      .join(separator)
    rows.push(headerRow)
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  tableData.rows.forEach(row => {
    const csvRow = row
      .map(cell => {
        const formattedCell = formatCellForCSV(cell)
        if (formattedCell.includes(separator) || formattedCell.includes('"') || formattedCell.includes("\n")) {
          return `"${formattedCell.replace(/"/g, '""')}"`
        }
        return formattedCell
      })
      .join(separator)
    rows.push(csvRow)
  })
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
  if (tableData.analytics?.summaryRows && tableData.analytics.summaryRows.length > 0) {
    rows.push("") // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    tableData.analytics.summaryRows.forEach(row => {
      const csvRow = row
        .map(cell => {
          const formattedCell = formatCellForCSV(cell)
          const prefixedCell = `# ${formattedCell}` // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
          if (prefixedCell.includes(separator) || prefixedCell.includes('"') || prefixedCell.includes("\n")) {
            return `"${prefixedCell.replace(/"/g, '""')}"`
          }
          return prefixedCell
        })
        .join(separator)
      rows.push(csvRow)
    })
  }
  
  return rows.join("\n")
}


export const exportToCSV = async (
  tableData: TableData,
  options: ExportOptions & { tableIndex?: number }
): Promise<ExportResult> => {
  try {
    // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –ø–æ –ª–æ–∫–∞–ª–∏
    const separator = getDefaultCsvSeparator()
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CSV —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∞—Ç
    const csv = createCSVFromTableData(tableData, options.includeHeaders, separator)

    const filename = generateFilename(
      tableData,
      "csv",
      options.filename,
      options.tableIndex
    )

    // –°–æ–∑–¥–∞–µ–º data URL –¥–ª—è CSV
    const bom = "\uFEFF"
    const base64 = btoa(unescape(encodeURIComponent(bom + csv)))
    const dataUrl = `data:text/csv;charset=utf-8;base64,${base64}`

    // Handle Google Drive upload if needed
    if (options.destination === 'google_drive') {
      if (!GOOGLE_DRIVE_ENABLED) {
        return { success: false, error: "Google Drive destination is disabled in this version" }
      }
      const uploadResult = await uploadToGoogleDrive(filename, dataUrl, 'csv')
      
      if (uploadResult.success) {
        return {
          success: true,
          filename,
          downloadUrl: uploadResult.webViewLink || dataUrl  // Use webViewLink or fallback to dataUrl
        }
      } else {
        return {
          success: false,
          error: `Google Drive upload failed: ${uploadResult.error}`
        }
      }
    }

    return {
      success: true,
      filename,
      downloadUrl: dataUrl
    }
  } catch (error) {
    console.error("Error exporting to CSV:", error)
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error occurred"
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets —Ñ–æ—Ä–º–∞—Ç
export const exportToGoogleSheets = async (
  tableData: TableData,
  options: ExportOptions & { tableIndex?: number }
): Promise<ExportResult> => {
  try {
    if (!GOOGLE_SHEETS_ENABLED) {
      return { success: false, error: "Google Sheets export is disabled in this version" }
    }
    const includeHeaders = options.includeHeaders !== false
    const { googleSheetsService } = await import("./google-sheets-api")

    const result = await googleSheetsService.exportTable(tableData, {
      includeHeaders,
      spreadsheetTitle: options.filename,
      sheetTitle: "Table_Data"
    })

    if (result.success) {
      return {
        success: true,
        filename: options.filename || "Google_Sheets_Export",
        downloadUrl: result.spreadsheetUrl,
        googleSheetsId: result.spreadsheetId,
        googleSheetsUrl: result.spreadsheetUrl
      }
    } else {
      return { success: false, error: result.error || "Failed to export to Google Sheets" }
    }
  } catch (error) {
    console.error("Error exporting to Google Sheets:", error)
    return { success: false, error: error instanceof Error ? error.message : "Unknown error" }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
export const exportTable = async (
  tableData: TableData,
  options: ExportOptions & { tableIndex?: number }
): Promise<ExportResult> => {
  // —É–¥–∞–ª—ë–Ω –ª–∏—à–Ω–∏–π console.log: Exporting table with destination
  switch (options.format) {
    case "xlsx":
      return exportToXLSX(tableData, options)
    case "csv":
      return exportToCSV(tableData, options)
    case "docx":
      return exportToDOCX(tableData, options)
    case "pdf":
      return exportToPDF(tableData, options)
    case "google_sheets":
      return exportToGoogleSheets(tableData, options)
    default:
      return {
        success: false,
        error: `Unsupported format: ${options.format}`
      }
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
export const validateTableData = (tableData: TableData): boolean => {
  if (!tableData.headers && !tableData.rows.length) {
    return false
  }

  if (tableData.headers.length === 0 && tableData.rows.length === 0) {
    return false
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
  const expectedColumns =
    tableData.headers.length || tableData.rows[0]?.length || 0

  return tableData.rows.every((row) => row.length === expectedColumns)
}

// –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤
export const cleanTableData = (tableData: TableData): TableData => {
  const cleanHeaders = tableData.headers.map((header) => header.trim())
  const cleanRows = tableData.rows.map((row) => row.map((cell) => cell.trim()))

  return {
    ...tableData,
    headers: cleanHeaders,
    rows: cleanRows
  }
}
