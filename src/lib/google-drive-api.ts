import { authService } from "./supabase/auth-service"
import { logExtensionError, safeStorageOperation, createErrorNotification } from "./error-handlers"

export interface DriveUploadOptions {
  filename: string
  content: string | Blob
  mimeType: string
  folderId?: string
}

export interface DriveUploadResult {
  success: boolean
  fileId?: string
  webViewLink?: string
  error?: string
}

class GoogleDriveService {
  private baseUrl = "https://www.googleapis.com/drive/v3"
  private uploadUrl = "https://www.googleapis.com/upload/drive/v3/files"

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ Google —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ authService
   */
  private async getValidToken(): Promise<string | null> {
    console.log("üîê GoogleDriveService: Getting valid token via authService...")
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ authService
      let token = authService.getGoogleToken()
      console.log("üìã AuthService token status:", {
        hasToken: !!token,
        tokenLength: token?.length || 0
      })

      if (!token) {
        console.log("üîÑ No token found, attempting refresh...")
        // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
        try {
          token = await authService.refreshGoogleToken()
          console.log("‚úÖ Token refresh result:", {
            success: !!token,
            newTokenLength: token?.length || 0
          })
        } catch (error) {
          const categorizedError = logExtensionError(
            error as Error,
            "Google token refresh via authService"
          )
          
          if (categorizedError.type === 'AUTH_ERROR') {
            console.log("üìù User needs to re-authenticate with Google Drive")
          }
          
          return null
        }
      }

      return token
    } catch (error) {
      const categorizedError = logExtensionError(
        error as Error,
        "Google Drive token retrieval via authService",
        { operation: "getValidToken" }
      )
      
      return null
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ TableXport –≤ Google Drive (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
   */
  async createTableXportFolder(): Promise<string | null> {
    const token = await this.getValidToken()
    if (!token) return null

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–∞–ø–∫–∞ TableXport
      const searchResponse = await fetch(
        `${this.baseUrl}/files?q=name='TableXport' and mimeType='application/vnd.google-apps.folder' and trashed=false`,
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      )

      if (!searchResponse.ok) {
        throw new Error(`Search failed: ${searchResponse.status} ${searchResponse.statusText}`)
      }

      const searchData = await searchResponse.json()

      if (searchData.files && searchData.files.length > 0) {
        return searchData.files[0].id // –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É
      const createResponse = await fetch(`${this.baseUrl}/files`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          name: "TableXport",
          mimeType: "application/vnd.google-apps.folder"
        })
      })

      if (!createResponse.ok) {
        throw new Error(`Folder creation failed: ${createResponse.status} ${createResponse.statusText}`)
      }

      const createData = await createResponse.json()
      return createData.id
    } catch (error) {
      logExtensionError(
        error as Error,
        "Google Drive folder creation"
      )
      return null
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Google Drive —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   */
  async uploadFile(options: DriveUploadOptions): Promise<DriveUploadResult> {
    const token = await this.getValidToken()

    if (!token) {
      return {
        success: false,
        error: "Google authentication required. Please reconnect your Google Drive account."
      }
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–∞–ø–∫–∏ TableXport
      const folderId = options.folderId || (await this.createTableXportFolder())

      const metadata = {
        name: options.filename,
        parents: folderId ? [folderId] : undefined
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º multipart upload
      const delimiter = "-------314159265358979323846"
      const delimiter_line = `\r\n--${delimiter}\r\n`
      const close_delim = `\r\n--${delimiter}--`

      const contentType = options.mimeType
      
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Blob –¥–∞–Ω–Ω—ã—Ö
      let content: string | ArrayBuffer
      let originalSize = 0
      
      if (typeof options.content === "string") {
        content = options.content
        originalSize = content.length
        console.log(`üìÑ String content: ${originalSize} characters`)
      } else {
        // –î–ª—è Blob –∏—Å–ø–æ–ª—å–∑—É–µ–º ArrayBuffer –≤–º–µ—Å—Ç–æ .text()
        const blob = options.content as Blob
        originalSize = blob.size
        content = await blob.arrayBuffer()
        console.log(`üì¶ Blob content: ${originalSize} bytes ‚Üí ArrayBuffer: ${content.byteLength} bytes`)
      }

      // –î–ª—è multipart upload –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å body
      let multipartRequestBody: string | Uint8Array

      if (typeof content === "string") {
        // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (CSV –∏ —Ç.–¥.)
        multipartRequestBody =
          delimiter_line +
          "Content-Type: application/json\r\n\r\n" +
          JSON.stringify(metadata) +
          delimiter_line +
          `Content-Type: ${contentType}\r\n\r\n` +
          content +
          close_delim
      } else {
        // –ë–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã (XLSX, ZIP, PDF, DOCX) - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏!
        const encoder = new TextEncoder()
        
        const headerPart = 
          delimiter_line +
          "Content-Type: application/json\r\n\r\n" +
          JSON.stringify(metadata) +
          delimiter_line +
          `Content-Type: ${contentType}\r\n\r\n`
        
        const footerPart = close_delim
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –±–∞–π—Ç—ã
        const headerBytes = encoder.encode(headerPart)
        const footerBytes = encoder.encode(footerPart)
        const contentBytes = new Uint8Array(content)
        
        // –°–æ–±–∏—Ä–∞–µ–º multipart body –∫–∞–∫ —á–∏—Å—Ç—ã–µ –±–∞–π—Ç—ã –ë–ï–ó —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
        const totalLength = headerBytes.length + contentBytes.length + footerBytes.length
        multipartRequestBody = new Uint8Array(totalLength)
        
        let offset = 0
        multipartRequestBody.set(headerBytes, offset)
        offset += headerBytes.length
        multipartRequestBody.set(contentBytes, offset)
        offset += contentBytes.length
        multipartRequestBody.set(footerBytes, offset)
        
        console.log(`üîß Binary upload: header=${headerBytes.length} + content=${contentBytes.length} + footer=${footerBytes.length} = ${totalLength} bytes (NO STRING CONVERSIONS)`)
      }

      const response = await fetch(`${this.uploadUrl}?uploadType=multipart`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": `multipart/related; boundary="${delimiter}"`
        },
        body: multipartRequestBody
      })

      if (!response.ok) {
        const errorText = await response.text()
        const error = new Error(`Upload failed: ${response.status} ${response.statusText} - ${errorText}`)
        
        // Log detailed error for debugging
        logExtensionError(
          error,
          "Google Drive file upload",
          {
            filename: options.filename,
            responseStatus: response.status,
            responseStatusText: response.statusText,
            errorText,
            originalSize,
            uploadSize: typeof multipartRequestBody === 'string' ? multipartRequestBody.length : multipartRequestBody.byteLength
          }
        )
        
        throw error
      }

      const result = await response.json()

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º webViewLink –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ
      const webViewLink = result.webViewLink || `https://drive.google.com/file/d/${result.id}/view`

      console.log("‚úÖ Google Drive upload successful:", {
        fileId: result.id,
        name: result.name,
        webViewLink: webViewLink,
        originalWebViewLink: result.webViewLink,
        generatedLink: !result.webViewLink,
        uploadStats: {
          originalSize,
          uploadSize: typeof multipartRequestBody === 'string' ? multipartRequestBody.length : multipartRequestBody.byteLength,
          contentType
        }
      })

      return {
        success: true,
        fileId: result.id,
        webViewLink: webViewLink
      }
    } catch (error) {
      const categorizedError = logExtensionError(
        error as Error,
        "Google Drive file upload",
        {
          filename: options.filename,
          mimeType: options.mimeType,
          originalSize
        }
      )
      
      return {
        success: false,
        error: categorizedError.userAction || categorizedError.message
      }
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
   */
  async exportTable(
    tableData: any[][],
    filename: string,
    format: "csv" | "xlsx" | "docx" | "pdf"
  ): Promise<DriveUploadResult> {
    let content: string
    let mimeType: string
    let fileExtension: string

    switch (format) {
      case "csv":
        content = this.convertToCSV(tableData)
        mimeType = "text/csv"
        fileExtension = ".csv"
        break

      case "xlsx":
        // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º XLSX —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–º
        content = this.convertToCSV(tableData) // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º CSV
        mimeType =
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        fileExtension = ".xlsx"
        break

      case "docx":
        // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º DOCX —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–º
        content = this.convertToCSV(tableData) // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º CSV
        mimeType =
          "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        fileExtension = ".docx"
        break

      case "pdf":
        // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º PDF —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–º
        content = this.convertToCSV(tableData) // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º CSV
        mimeType = "application/pdf"
        fileExtension = ".pdf"
        break

      default:
        return {
          success: false,
          error: `Unsupported format: ${format}`
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const finalFilename = filename.endsWith(fileExtension)
      ? filename
      : `${filename}${fileExtension}`

    return this.uploadFile({
      filename: finalFilename,
      content,
      mimeType
    })
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ CSV
   */
  private convertToCSV(data: any[][]): string {
    return data
      .map((row) =>
        row
          .map((cell) => {
            const cellStr = String(cell || "")
            // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—è—Ç—ã–µ
            if (
              cellStr.includes('"') ||
              cellStr.includes(",") ||
              cellStr.includes("\n")
            ) {
              return `"${cellStr.replace(/"/g, '""')}"`
            }
            return cellStr
          })
          .join(",")
      )
      .join("\n")
  }
}

export const googleDriveService = new GoogleDriveService()
