import { findAllTables, extractTableData, isValidTable } from '../../utils/table-detector';
import { addedButtons, calculateButtonPosition, createExportButton } from './export-button';
import { detectAllTables, getBatchState } from '../../utils/table-detection/batch-detector';
import { updateBatchButton } from './batch-export-button';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
const getTargetContainers = (): HTMLElement[] => {
  const url = window.location.href;
  const containers: HTMLElement[] = [];

  // ChatGPT
  if (url.includes('chat.openai.com') || url.includes('chatgpt.com')) {
    containers.push(
      ...Array.from(document.querySelectorAll('main, [class*="conversation-"], [class*="message-"]'))
        .filter((el): el is HTMLElement => el instanceof HTMLElement)
    );
  }
  // Claude
  else if (url.includes('claude.ai')) {
    containers.push(
      ...Array.from(document.querySelectorAll('.chat-messages, .message-container, [class*="claude-"]'))
        .filter((el): el is HTMLElement => el instanceof HTMLElement)
    );
  }
  // Gemini
  else if (url.includes('gemini.google.com') || url.includes('bard.google.com')) {
    containers.push(
      ...Array.from(document.querySelectorAll('mat-card, .message-container, [class*="gemini-"]'))
        .filter((el): el is HTMLElement => el instanceof HTMLElement)
    );
  }
  // DeepSeek
  else if (url.includes('chat.deepseek.com') || url.includes('deepseek.com')) {
    containers.push(
      ...Array.from(document.querySelectorAll('.chat-container, .message-list, [class*="deepseek-"]'))
        .filter((el): el is HTMLElement => el instanceof HTMLElement)
    );
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ
  if (containers.length === 0) {
    containers.push(
      ...Array.from(document.querySelectorAll('main, .main-content, .chat-container'))
        .filter((el): el is HTMLElement => el instanceof HTMLElement)
    );
  }

  // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º body
  return containers.length > 0 ? containers : [document.body];
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –º—É—Ç–∞—Ü–∏–∏
const shouldProcessMutation = (mutation: MutationRecord): boolean => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞—à–∏—Ö –∫–Ω–æ–ø–∫–∞—Ö –∏ UI —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
  if (mutation.target instanceof HTMLElement) {
    const targetEl = mutation.target;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞—à–∏—Ö –∫–Ω–æ–ø–∫–∞—Ö —ç–∫—Å–ø–æ—Ä—Ç–∞
    if (targetEl.tagName === 'BUTTON' ||
        targetEl.getAttribute('title')?.includes('Export') ||
        targetEl.textContent?.includes('Export') ||
        targetEl.classList.contains('tabxport-export-button') ||
        targetEl.style.backgroundColor?.includes('#10b981') ||
        targetEl.classList.contains('text-input-field') ||
        targetEl.classList.contains('input') ||
        targetEl.classList.contains('toolbar') ||
        targetEl.classList.contains('menu') ||
        targetEl.classList.contains('dropdown') ||
        targetEl.classList.contains('modal') ||
        targetEl.classList.contains('popup') ||
        targetEl.classList.contains('tooltip') ||
        targetEl.id?.includes('input') ||
        targetEl.id?.includes('toolbar') ||
        targetEl.id?.includes('menu') ||
        targetEl.id?.includes('tabxport')) {
      // –£–ë–†–ê–ù–û: –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π UI –º—É—Ç–∞—Ü–∏–∏
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —É–∑–ª—ã
  for (const node of Array.from(mutation.addedNodes)) {
    if (node instanceof HTMLElement) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞—à–∏ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–∑–ª–∞—Ö
      if (node.tagName === 'BUTTON' &&
          (node.getAttribute('title')?.includes('Export') ||
           node.textContent?.includes('Export') ||
           node.classList.contains('tabxport-export-button') ||
           node.style.backgroundColor?.includes('#10b981'))) {
        // –£–ë–†–ê–ù–û: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü –∏–ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Ç–∞–±–ª–∏—Ü
      if (node.tagName === 'TABLE' || 
          node.tagName === 'PRE' || 
          node.tagName === 'CODE') {
        console.log('TabXport: üîç Detected new table-like element:', node.tagName);
        return true;
      }

      // –î–ª—è div —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ
      if (node.tagName === 'DIV') {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –Ω–∞—à–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
        if (node.classList.contains('text-input-field') ||
            node.classList.contains('input') ||
            node.classList.contains('toolbar') ||
            node.classList.contains('menu') ||
            node.classList.contains('dropdown') ||
            node.classList.contains('modal') ||
            node.classList.contains('popup') ||
            node.classList.contains('tooltip') ||
            node.id?.includes('input') ||
            node.id?.includes('toolbar') ||
            node.id?.includes('menu') ||
            node.id?.includes('tabxport')) {
          return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ div —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const hasTableLikeContent = 
          node.querySelector('table, pre, code') ||
          (node.textContent?.includes('|') && 
           node.textContent?.split('\n').length > 2 &&
           node.textContent?.split('|').length >= 3);
        
        if (hasTableLikeContent) {
          console.log('TabXport: üîç Detected new div with table content');
          return true;
        }
      }
    }
  }

  return false;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü
export const scanAndProcessTables = async (): Promise<void> => {
  try {
    console.log('*** TabXport NEW VERSION: Scanning for tables with BATCH DETECTION ***');
    console.log('TabXport: Scanning for tables...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º batch detection –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–±—ã—á–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
    const [tables, batchResult] = await Promise.all([
      Promise.resolve(findAllTables()),
      detectAllTables()
    ]);
    
    console.log(`TabXport: Found ${tables.length} potential tables:`, tables);
    console.log(`TabXport: Batch detection found ${batchResult.count} tables`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º batch export –∫–Ω–æ–ø–∫—É
    updateBatchButton(batchResult);
    
    // –°–æ–∑–¥–∞–µ–º Set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∞–±–ª–∏—Ü
    const tableElementsSet = new Set(tables);
    console.log(`TabXport: Unique table elements: ${tableElementsSet.size}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const currentButtonCount = addedButtons.size;
    const tableCount = tableElementsSet.size;
    const validBatchTablesCount = batchResult.count;
    
    console.log(`TabXport: Current buttons: ${currentButtonCount}, Found tables: ${tableCount}, Valid batch tables: ${validBatchTablesCount}`);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–∏–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    const isFirstLoad = currentButtonCount === 0;
    const isSignificantChange = Math.abs(currentButtonCount - tableCount) > 2; // –ò–ó–ú–ï–ù–ï–ù–û: –±–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–æ—Ä–æ–≥
    const hasValidationMismatch = Math.abs(currentButtonCount - validBatchTablesCount) > 1; // –ò–ó–ú–ï–ù–ï–ù–û: –±–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–æ—Ä–æ–≥
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if (isFirstLoad) {
      console.log('TabXport: First load - performing full validation');
    } else if (isSignificantChange) {
      console.log('TabXport: Significant change detected - performing full validation');
    } else if (hasValidationMismatch && validBatchTablesCount > currentButtonCount) {
      console.log('TabXport: Missing buttons detected - adding new ones only');
    } else {
      console.log('TabXport: Table count stable, checking for new tables only');
      
      // –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ –Ω–æ–≤—ã–º —Ç–∞–±–ª–∏—Ü–∞–º –ë–ï–ó –£–î–ê–õ–ï–ù–ò–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ò–•
      let newTablesProcessed = 0;
      for (const [index, table] of tables.entries()) {
        if (!addedButtons.has(table)) {
          try {
            console.log(`TabXport: Processing new table ${index + 1}/${tables.length}`);
            const isValid = await isValidTable(table);
            if (isValid) {
              console.log(`TabXport: Adding export button to new table ${index}`);
              await addExportButton(table);
              newTablesProcessed++;
            }
          } catch (error) {
            console.error(`TabXport: Error processing new table ${index}:`, error);
          }
        }
      }
      
      console.log(`TabXport: Processed ${newTablesProcessed} new tables`);
      return;
    }
    
    // –ü–û–õ–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    console.log('TabXport: Starting full table validation');
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –£–î–ê–õ–Ø–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–´–ï –∫–Ω–æ–ø–∫–∏
    const invalidButtons: HTMLElement[] = [];
    for (const [tableElement, button] of addedButtons.entries()) {
      if (!document.contains(button) || !document.contains(tableElement)) {
        invalidButtons.push(button);
        addedButtons.delete(tableElement);
      }
    }
    
    if (invalidButtons.length > 0) {
      console.log(`TabXport: Removing ${invalidButtons.length} invalid buttons`);
      invalidButtons.forEach(button => {
        try {
          if (button.parentNode) {
            button.parentNode.removeChild(button);
          }
        } catch (error) {
          console.error('TabXport: Error removing invalid button:', error);
        }
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¢–û–õ–¨–ö–û –∫ –Ω–æ–≤—ã–º –≤–∞–ª–∏–¥–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º
    console.log(`TabXport: Starting table validation for ${tables.length} tables`);
    
    for (let index = 0; index < tables.length; index++) {
      const table = tables[index];
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —É–∂–µ –µ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–Ω–∞
      if (addedButtons.has(table)) {
        const existingButton = addedButtons.get(table);
        if (existingButton && document.contains(existingButton)) {
          console.log(`TabXport: Table ${index} already has valid button, skipping`);
          continue;
        }
      }
      
      try {
        console.log(`TabXport: ===== Checking NEW table ${index + 1}/${tables.length} =====`);
        console.log(`TabXport: Table ${index} element:`, table.tagName, table.className || 'no-class');
        console.log(`TabXport: Table ${index} text preview:`, table.textContent?.substring(0, 150));
        
        const isValid = await isValidTable(table);
        console.log(`TabXport: Table ${index} validation result: ${isValid ? 'VALID' : 'INVALID'}`);
        
        if (isValid) {
          console.log(`TabXport: ‚úÖ Adding export button to table ${index}`);
          await addExportButton(table);
        } else {
          console.log(`TabXport: ‚ùå Table ${index} is not valid, skipping`);
        }
      } catch (tableError) {
        console.error(`TabXport: Error processing table ${index}:`, tableError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }
    
    console.log(`TabXport: Validation complete. Active buttons: ${addedButtons.size}`);
    setTimeout(() => {
      console.log(`TabXport: Final scan results - Active buttons: ${addedButtons.size}`);
      console.log(`TabXport: Batch detection state:`, getBatchState());
    }, 1000); // –£–ú–ï–ù–¨–®–ï–ù–û: —Å 2000 –¥–æ 1000
    
  } catch (error) {
    console.error('TabXport: Critical error in scanAndProcessTables:', error);
  }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
let scanTimeout: NodeJS.Timeout | null = null;
let lastScanTime = 0;
let observer: MutationObserver | null = null;

export const setupMutationObserver = (): void => {
  // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π observer, –æ—Ç–∫–ª—é—á–∞–µ–º –µ–≥–æ
  if (observer) {
    observer.disconnect();
  }

  const targetContainers = getTargetContainers();
  console.log('TabXport: Setting up observers for containers:', targetContainers.length);

  observer = new MutationObserver((mutations) => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const now = Date.now();
    if (now - lastScanTime < 5000) { // –£–í–ï–õ–ò–ß–ï–ù–û: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 5 —Å–µ–∫—É–Ω–¥
      // –£–ë–†–ê–ù–û: –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ throttling
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const relevantMutations = mutations.filter(shouldProcessMutation);
    
    // –£–ü–†–û–©–ï–ù–û: –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –º—É—Ç–∞—Ü–∏–∏
    if (relevantMutations.length === 0) {
      // –£–ë–†–ê–ù–û: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      return;
    }

    console.log(`TabXport: üîÑ Found ${relevantMutations.length} relevant changes (${mutations.length} total mutations)`);

    if (scanTimeout) {
      console.log('TabXport: ‚è±Ô∏è Resetting scan timer');
      clearTimeout(scanTimeout);
    }

    scanTimeout = setTimeout(() => {
      console.log('TabXport: üöÄ Starting table scan after mutation detection');
      scanAndProcessTables().catch(error => {
        console.error('TabXport: Error in MutationObserver scan:', error);
      });
      lastScanTime = Date.now();
      scanTimeout = null;
    }, 3000); // –£–í–ï–õ–ò–ß–ï–ù–û: –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ 3 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ DOM
  });

  // –ù–∞–±–ª—é–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
  const mainContainer = targetContainers[0]; // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  if (mainContainer) {
    observer.observe(mainContainer, {
      childList: true,
      subtree: true,
      characterData: false,
      attributes: false
    });
    console.log('TabXport: Observing main container:', mainContainer.tagName, mainContainer.className);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ (–≤–º–µ—Å—Ç–æ 5)
  setInterval(() => {
    const newContainers = getTargetContainers();
    const mainContainer = newContainers[0];
    
    if (mainContainer && observer) {
      observer.disconnect();
      observer.observe(mainContainer, {
        childList: true,
        subtree: true,
        characterData: false,
        attributes: false
      });
      console.log('TabXport: Updated observation for main container:', mainContainer.tagName, mainContainer.className);
    }
  }, 10000);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ
const addExportButton = async (tableElement: HTMLElement): Promise<void> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
    if (addedButtons.has(tableElement)) {
      const existingButton = addedButtons.get(tableElement);
      if (existingButton && document.contains(existingButton)) {
        console.log('TabXport: Button already exists for this table');
        return;
      } else {
        // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Map, –Ω–æ –Ω–µ –≤ DOM, —É–¥–∞–ª—è–µ–º –µ—ë –∏–∑ Map
        addedButtons.delete(tableElement);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã
    if (!tableElement.offsetParent) {
      console.log('TabXport: Table is not visible, skipping button addition');
      return;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    console.log('TabXport: Extracting table data with auto-formatting...');
    const tableData = await extractTableData(tableElement);
    if (!tableData || !tableData.headers.length && !tableData.rows.length) {
      console.log('TabXport: Invalid table data, skipping button addition');
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(() => {
      try {
        console.log('TabXport: Calculating button position...');
        const position = calculateButtonPosition(tableElement);
        
        if (!position) {
          console.log('TabXport: Could not calculate button position');
          return;
        }
        
        console.log('TabXport: Button position calculated:', position);
        
        const button = createExportButton(tableData, position);
        console.log('TabXport: Export button created');
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–º–µ–µ—Ç relative –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        const containerStyle = window.getComputedStyle(position.container);
        if (containerStyle.position === 'static') {
          position.container.style.position = 'relative';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        position.container.appendChild(button);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –∏ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –≤–∏–¥–Ω–∞
        setTimeout(() => {
          if (!document.contains(button) || !button.offsetParent) {
            console.log('TabXport: Button is not visible, trying to fix...');
            button.style.display = 'flex';
            button.style.visibility = 'visible';
            button.style.opacity = '1';
            button.style.zIndex = '9999';
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            const newPosition = calculateButtonPosition(tableElement);
            if (newPosition) {
              button.style.top = `${newPosition.y}px`;
              button.style.left = `${newPosition.x}px`;
            }
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞
          if (document.contains(button)) {
            addedButtons.set(tableElement, button);
            console.log('TabXport: Button successfully added and saved');
          }
        }, 500);
        
      } catch (creationError) {
        console.error('TabXport: Error during button creation:', creationError);
      }
    }, 1000); // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏
    
  } catch (error) {
    console.error('TabXport: Critical error in addExportButton:', error);
  }
}; 