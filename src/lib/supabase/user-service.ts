import { supabase } from "../supabase"
import type {
  ExportDestination,
  PlanType,
  Subscription,
  UsageQuota,
  UserProfile,
  UserProfileInsert,
  UserProfileUpdate,
  ExportLimitCheck,
  DailyUsageStats
} from "./types"

export interface UserData {
  profile: UserProfile
  subscription: Subscription
  quota: UsageQuota
}

// ExportLimitCheck —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ types.ts

class UserService {
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserData(userId: string): Promise<UserData | null> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: profile, error: profileError } = await supabase
        .from("user_profiles")
        .select("*")
        .eq("user_id", userId)
        .single()

      if (profileError) {
        console.error("Error fetching user profile:", profileError)
        return null
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      const { data: subscription, error: subscriptionError } = await supabase
        .from("subscriptions")
        .select("*")
        .eq("user_id", userId)
        .single()

      if (subscriptionError) {
        console.error("Error fetching subscription:", subscriptionError)
        return null
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–≤–æ—Ç—ã
      const { data: quota, error: quotaError } = await supabase
        .from("usage_quotas")
        .select("*")
        .eq("user_id", userId)
        .single()

      if (quotaError) {
        console.error("Error fetching usage quota:", quotaError)
        return null
      }

      return { profile, subscription, quota }
    } catch (error) {
      console.error("Error fetching user data:", error)
      return null
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async createUserProfile(
    data: UserProfileInsert
  ): Promise<UserProfile | null> {
    try {
      const { data: profile, error } = await supabase
        .from("user_profiles")
        .insert(data)
        .select()
        .single()

      if (error) {
        console.error("Error creating user profile:", error)
        return null
      }

      return profile
    } catch (error) {
      console.error("Error creating user profile:", error)
      return null
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateUserProfile(
    userId: string,
    updates: UserProfileUpdate
  ): Promise<boolean> {
    try {
      const { error } = await supabase
        .from("user_profiles")
        .update(updates)
        .eq("user_id", userId)

      if (error) {
        console.error("Error updating user profile:", error)
        return false
      }

      return true
    } catch (error) {
      console.error("Error updating user profile:", error)
      return false
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async checkExportLimits(
    userId: string,
    destination: ExportDestination = "download"
  ): Promise<ExportLimitCheck> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = await this.getUserData(userId)
      if (!userData) {
        return {
          canExport: false,
          canExportToGoogleDrive: false,
          remainingExports: 0,
          remainingGoogleDriveExports: 0,
          limitMessage: "User data not found"
        }
      }

      const { quota, subscription } = userData

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
      const today = new Date().toDateString()
      const lastResetDate = quota.last_reset_date ? new Date(quota.last_reset_date).toDateString() : null
      
      if (lastResetDate !== today) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
        await this.resetDailyLimits(userId)
        quota.exports_today = 0
        quota.last_reset_date = new Date().toISOString()
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞–Ω–∞
      const dailyExportLimit = subscription.plan_type === 'free' ? 5 : -1 // Free: 5 –≤ –¥–µ–Ω—å, Pro: unlimited
      const googleDriveAccess = subscription.plan_type !== 'free' // –¢–æ–ª—å–∫–æ –¥–ª—è Pro+

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
      const canExport = dailyExportLimit === -1 || quota.exports_today < dailyExportLimit
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ Google Drive
      const canExportToGoogleDrive = googleDriveAccess && (destination !== "google_drive" || canExport)

      // –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–∫—Å–ø–æ—Ä—Ç—ã
      const remainingExports = dailyExportLimit === -1 
          ? -1 // Unlimited
        : Math.max(0, dailyExportLimit - quota.exports_today)

      const remainingGoogleDriveExports = googleDriveAccess 
        ? remainingExports 
        : 0

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö
      let limitMessage: string | undefined

      if (!canExport) {
        if (subscription.plan_type === "free" && quota.exports_today >= dailyExportLimit) {
          limitMessage = `You've reached your daily limit of ${dailyExportLimit} exports. Upgrade to Pro for unlimited exports or wait until tomorrow.`
        }
      } else if (destination === "google_drive" && !googleDriveAccess) {
        limitMessage = "Google Drive export is available only for Pro subscribers."
      }

      return {
        canExport,
        canExportToGoogleDrive,
        remainingExports,
        remainingGoogleDriveExports,
        limitMessage
      }
    } catch (error) {
      console.error("Error checking export limits:", error)
      return {
        canExport: false,
        canExportToGoogleDrive: false,
        remainingExports: 0,
        remainingGoogleDriveExports: 0,
        limitMessage: "Error checking limits"
      }
    }
  }

  /**
   * –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
   */
  private async resetDailyLimits(userId: string): Promise<void> {
    try {
      const { error } = await supabase
        .from('usage_quotas')
        .update({
          exports_today: 0,
          last_reset_date: new Date().toISOString()
        })
        .eq('user_id', userId)

      if (error) {
        console.error("Error resetting daily limits:", error)
      }
    } catch (error) {
      console.error("Error resetting daily limits:", error)
    }
  }

  /**
   * –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
   */
  async incrementExportCount(userId: string): Promise<void> {
    try {
      const { error } = await supabase.rpc('increment_daily_exports', {
        user_uuid: userId
      })

      if (error) {
        console.error("Error incrementing export count:", error)
      }
    } catch (error) {
      console.error("Error incrementing export count:", error)
    }
  }

  /**
   * –í–∫–ª—é—á–µ–Ω–∏–µ Google Drive –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async enableGoogleDrive(userId: string, folderId?: string): Promise<boolean> {
    try {
      const updates: UserProfileUpdate = {
        google_drive_enabled: true
      }

      if (folderId) {
        updates.google_drive_folder_id = folderId
      }

      return await this.updateUserProfile(userId, updates)
    } catch (error) {
      console.error("Error enabling Google Drive:", error)
      return false
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getExportHistory(userId: string, limit: number = 50) {
    try {
      const { data, error } = await supabase
        .from("export_history")
        .select("*")
        .eq("user_id", userId)
        .order("created_at", { ascending: false })
        .limit(limit)

      if (error) {
        console.error("Error fetching export history:", error)
        return []
      }

      return data
    } catch (error) {
      console.error("Error fetching export history:", error)
      return []
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–∞—Ö
   */
  // method shouldShowLimitWarning(quota)
  shouldShowLimitWarning(quota: UsageQuota): boolean {
  // TESTING MODE: Never show limit warnings
  // —É–¥–∞–ª–µ–Ω –ª–∏—à–Ω–∏–π console.log —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
  return false

    // Original warning logic commented out for testing
    /*
    if (quota.exports_limit === -1) return false // Unlimited plan

    const usagePercentage =
      (quota.exports_this_month / quota.exports_limit) * 100
    return usagePercentage >= 80 // Show warning at 80% usage
    */
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  // method getUsageMessage(quota)
  getUsageMessage(quota: UsageQuota): string {
  // TESTING MODE: Always show unlimited access message
  // —É–¥–∞–ª–µ–Ω –ª–∏—à–Ω–∏–π console.log —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
  return "üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã ‚ú®"

    // Original usage message logic commented out for testing
    /*
    if (quota.exports_limit === -1) {
      return "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã ‚ú®"
    }

    const remaining = quota.exports_limit - quota.exports_this_month
    const resetDate = new Date(quota.reset_date).toLocaleDateString("ru-RU")

    if (remaining <= 0) {
      return `–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –û–±–Ω–æ–≤–∏—Ç—Å—è ${resetDate}`
    }

    if (remaining <= 2) {
      return `–û—Å—Ç–∞–ª–æ—Å—å ${remaining} —ç–∫—Å–ø–æ—Ä—Ç${remaining === 1 ? "" : "–∞"}. –û–±–Ω–æ–≤–∏—Ç—Å—è ${resetDate}`
    }

    return `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${quota.exports_this_month} –∏–∑ ${quota.exports_limit} —ç–∫—Å–ø–æ—Ä—Ç–æ–≤`
    */
  }
}

export const userService = new UserService()
